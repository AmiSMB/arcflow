#!/bin/sh

BRANCH=`git status | grep 'On branch' | awk '{print $NF}'`
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

warn() { echo "$@" >&2; }
die() { warn "ERROR: $@"; exit 1; }

git_out()
{
  git "$@" 2>&1 >/dev/null
}

git_quiet()
{
  quiet git "$@"
}

quiet()
{
  "$@" >/dev/null 2>&1
}

type_from_branch()
{
  IFS='/' read -a _DATA <<< "$BRANCH"
  echo "${_DATA[0]}"
}

task_from_branch()
{
  IFS='/' read -a _DATA <<< "$BRANCH"
  echo "${_DATA[1]}"
}

require_branch()
{
  if [ "$BRANCH" = "" ] || [ "$BRANCH" = "master" ] || [ "$BRANCH" = "develop" ] ; then
    die "Cannot submit $BRANCH for review, you are not on a feature branch."
  fi
}

cmd_help()
{
	echo "usage: arcflow <subcommand>"
	echo
	echo "Available subcommands are:"
	echo "   help      This page."
	echo "   update    Update the arcflow repo."
	echo "   start     Start work on a task."
	echo "   review    Submit this branch for review."
	echo "   finish    Merge the branch into develop."
	echo "   abandon   Abandon the this branch and delete it from the repo."
}

# arcflow start Txxx
cmd_start()
{
  # must start from develop
  git_quiet checkout develop

  local _TASKID="$1"; shift
  local _TASKS=`arc tasks | grep -E "Hotfix|Bug|Feature|Release Candidate" | grep -v Parent`
  if [ "$_TASKID" = "" ] ; then
    die "No task specified\n$_TASKS";
  fi

  local _TAS=`arc tasks --owner @all | sed -E '/^'"$_TASKID"' /!d; s/ {2,}/<TAB>/g; s/^'"$_TASKID"' (.*)<TAB>(.*)<TAB>[a-zA-Z]*$/\1~\2/'`
  IFS='~' read _TITLE _TYPE <<< "$_TAS"

  if [ "$_TITLE" = "" ] ; then
    die "Task $_TASKID not found.\n$_TASKS";
  fi

  # TODO: not very flexible: Hotfix, Bug, Release Candidate, Feature
  local _FLOWTYPE=''
  if [ "$_TYPE" = "Hotfix" ]; then
    _FLOWTYPE='hotfix'
  elif [ "$_TYPE" = "Bug" ]; then
    _FLOWTYPE='feature'
  elif [ "$_TYPE" = "Feature" ]; then
    _FLOWTYPE='feature'
  elif [ "$_TYPE" = "Release Candidate" ]; then
    _FLOWTYPE='release'
  fi

  if [ "$_FLOWTYPE" = '' ]; then
    die "Task type '$_TYPE' not supported in arcflow"
  fi

  # start the hotfix/bug/release
  local _ERR=`git_out flow "$_FLOWTYPE" start "$_TASKID"`
  if [ "$_ERR" != "" ] ; then
    local _NOERR=`echo "$_ERR" | sed '/^Branch .* already exists. Pick another name.$/!d'`
    if [ "$_NOERR" != "" ] ; then
      #branch already exists, see if its in our local branch list
      git_quiet checkout "$_FLOWTYPE/$_TASKID"
    else
      local _NOERR=`echo "$_ERR" | sed '/^Switched to a new branch .*$/!d'`
      if [ "$_NOERR" = "" ] ; then
        die "$_ERR"
      fi
    fi
  fi

  git_quiet flow "$_FLOWTYPE" publish "$_TASKID"
  echo "Now, start committing to your $_TYPE. When done, use:\n\n      arcflow review\n"
}

# arcflow review
cmd_review()
{
  require_branch
  echo "Submitting $BRANCH for review."

  phpunit
  if [ 0 != "$?" ] ; then
    die "Unit tests failed.  Please fix and try again."
  fi

  local _TYPE=`type_from_branch`

  local _DIFFBRANCH='develop'
  if [ "$_TYPE" = "hotfix" ] || [ "$_TYPE" = "release" ]; then
    _DIFFBRANCH='master'
  fi

  git push
  arc diff "$_DIFFBRANCH"
}

# arcflow finish
cmd_finish()
{
  require_branch
  local _DIFF=`arc amend --show | sed -E '/^Differential Revision:/!d; s/^.*(D[0-9]+)$/\1/'`
  local _TYPE=`type_from_branch`
  local _TASK=`task_from_branch`

  local _FLAGS=''
  if [ "$_TYPE" = "hotfix" ] || [ "$_TYPE" = "release" ]; then
    _FLAGS='-Fn'
  elif [ "$_TYPE" = "feature" ]; then
    _FLAGS='-F'
  fi

  git push
  git flow "$_TYPE" finish "$_FLAGS" "$_TASK"
  arc close-revision "$_DIFF"
  git push --all
  git push origin :"$_TYPE/$_TASK"
}

cmd_abandon()
{
  require_branch
  read -p "Are you sure you wish to abandon $BRANCH [y/N]? " -r
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    delete_branch
  fi
}

cmd_update()
{
  cd "$DIR"
  git pull
}

delete_branch()
{
  require_branch
  git checkout develop
  git branch -d "$BRANCH"
  git push origin :"$BRANCH"
}

SUBCOMMAND="$1"; shift
if [ "" = "$SUBCOMMAND" ]; then
  cmd_help
elif ! type "cmd_$SUBCOMMAND" >/dev/null 2>&1; then
	die "Unknown subcommand: '$SUBCOMMAND'\n`cmd_help`"
else
  cmd_$SUBCOMMAND "$@"
fi
